import esprima
import asyncio
from pathlib import Path
import json
from main import CFGNode, TaintAnalyzer, TaintLabel

# Dummy label simulating taint metadata
class DummyLabel:
    def __init__(self, sanitizers=None):
        self.sanitizers = sanitizers  # Can be None or a set()

# Dummy AST node simulating JavaScript source code
class DummyAST:
    def source(self):
        return "eval(userInput)"


# ✅ Test 1: Should detect a vulnerability if no sanitizer is present
def test_check_vulnerability_detects_issue(capfd):
    node = CFGNode()
    node.tainted_vars.add("userInput")

    label = DummyLabel(sanitizers=set())  # No sanitizer
    node.taint_labels = {"userInput": {label}}
    node.ast_node = DummyAST()

    analyzer = TaintAnalyzer()
    analyzer._check_vulnerability(node)

    out, _ = capfd.readouterr()
    assert "Vulnerability found: userInput -> eval(userInput)" in out


# ✅ Test 2: Should NOT detect a vulnerability if a sanitizer exists
def test_check_vulnerability_with_sanitizer(capfd):
    node = CFGNode()
    node.tainted_vars.add("userInput")

    label = DummyLabel(sanitizers={"escape"})  # Sanitized
    node.taint_labels = {"userInput": {label}}
    node.ast_node = DummyAST()

    analyzer = TaintAnalyzer()
    analyzer._check_vulnerability(node)

    out, _ = capfd.readouterr()
    assert "Vulnerability found" not in out


# ✅ Test 3: Should be silent when node is empty
def test_check_vulnerability_skips_empty_node(capfd):
    node = CFGNode()  # No taint, no AST
    analyzer = TaintAnalyzer()
    analyzer._check_vulnerability(node)

    out, _ = capfd.readouterr()
    assert out == ""
